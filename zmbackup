#!/bin/bash

################################################
# Zimbra backup script for open source edition #
################################################

ZIMBRA_HOME=/opt/zimbra
ZIMBRA_BIN=$ZIMBRA_HOME/bin
ZIMBRA_BACKUP_DIR=$ZIMBRA_HOME/backup

BACKUP_DATE=`date +%G-%m-%d_%H-%M`

# set default option is false (unset)
VERBOSE=false

log()
{
  # verbose option is turn on
  if $VERBOSE; then
    echo $1
  fi
}

usage()
{

  cat << EOF
zmbackup: zmbackup [-o path] -a|[-u mailbox] [-d data_types]
-a
  backup all accounts and all domains in system.
-u mailbox
  backup specific mailbox(account).
-o path
  place output to path
-d data_types
  backup with specific data types by define option
    message         backup mail
    conversation    backup mail reply
    contact         backup contact
    appointment     backup calendar
    task            backup task
    document        backup document or briefcase
  Ex. zmbackup -a -d message,conversation # it's backup mail reply only
EOF

}

backup_mailbox()
{
  # params
  mbox=$1
  domain=$2

  log "start backup mailbox $mbox"

  if [ ! -z $domain ]; then
    if [ ! -z $data_types ]; then
      $ZIMBRA_BIN/zmmailbox -z -m $mbox getRestURL "//?fmt=tgz&types=$data_types" > $ZIMBRA_BACKUP_DIR/$2/$mbox-$BACKUP_DATE.tgz
    else
      $ZIMBRA_BIN/zmmailbox -z -m $mbox getRestURL "//?fmt=tgz" > $ZIMBRA_BACKUP_DIR/$2/$mbox-$BACKUP_DATE.tgz
    fi
  else
    if [ ! -z $data_types ]; then
      $ZIMBRA_BIN/zmmailbox -z -m $mbox getRestURL "//?fmt=tgz&types=$data_types" > $ZIMBRA_BACKUP_DIR/$mbox-$BACKUP_DATE.tgz
    else
      $ZIMBRA_BIN/zmmailbox -z -m $mbox getRestURL "//?fmt=tgz" > $ZIMBRA_BACKUP_DIR/$mbox-$BACKUP_DATE.tgz
    fi
  fi
  log "backup mailbox $mbox successful"
  log "backup to $ZIMBRA_BACKUP_DIR/$domain"
}

create_pack_backup()
{
  log "lookup domain"
  domains=`$ZIMBRA_BIN/zmprov gad`

  for domain in $domains; do
    log "start backup domain $domain"

    # get all accounts from domain
    mboxs=`$ZIMBRA_BIN/zmprov -l gaa $domain`

    mkdir -p $ZIMBRA_BACKUP_DIR/$domain

    # fetch account in tgz format
    for mbox in $mboxs; do
      backup_mailbox $mbox $domain
    done

    # pack mailbox in domain
    cd $ZIMBRA_BACKUP_DIR/$domain
    tar czf $domain-$BACKUP_DATE.tgz `ls`
    mv $domain-$BACKUP_DATE.tgz $ZIMBRA_BACKUP_DIR
    cd $ZIMBRA_BACKUP_DIR
    rm -rf $ZIMBRA_BACKUP_DIR/$domain

    log "backup domain $domain successful"

  done
}

# Option
# zmbackup [-ah] [-u mailbox] [-o path]
while getopts :ad:ho:u:v OPTION; do
  case $OPTION in
    a )
      AFLAG=true
      ;;
    d )
      if [ -z $OPTARG ]; then
        usage
        exit 1
      else
        # data_types=${OPTARG//","/"%2C"} # replace comma (,) with %2C follow encoding url
        data_types=$OPTARG
      fi
      ;;
    o )
      if [ -z $OPTARG ]; then
        echo "-o option must specific path"
        exit 1
      elif [ ${OPTARG:${#OPTARG}-1:${#OPTARG}} == "/" ]; then # if last character has "/" then cut "/"
        ZIMBRA_BACKUP_DIR=${OPTARG:0:${#OPTARG}-1} # substring from 0 to strlen - 1
      else
        ZIMBRA_BACKUP_DIR=$OPTARG
      fi
      ;;
    u )
      if [ -z $OPTARG ]; then
        echo "-u option must specific mailbox"
      else
        UFLAG=$OPTARG
      fi
      ;;
    v )
      VERBOSE=true
      ;;
      # other option doesn't match
    h | * )
      usage
      exit 1
      ;;
  esac
done

# if not specific -a or -u it error and exit the script
if [ -z $UFLAG ] && [ ! $AFLAG ]; then
  echo "you must specific -a or -u option"
  exit 1
fi

# if UFLAG has value but AFLAG is used
if [ ! -z $UFLAG ] && $AFLAG ; then
  echo "use -a or -u"
  exit 1
  # if declare UFLAG
elif [ ! -z $UFLAG ]; then
  backup_mailbox $UFLAG
fi

# if AFLAG enable
if $AFLAG ; then
  create_pack_backup
fi

